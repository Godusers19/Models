# meta developer: @Goduser18
from hikkatl.types import Message
from .. import loader, utils
import random
import string
import hashlib
from cryptography.fernet import Fernet
import urllib.parse

@loader.tds
class PassGenMod(loader.Module):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π"""

    strings = {
        "name": "PassGen",
        "gen_help": "üîê <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n<code>.genpwd site.com</code> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å\n<code>.genpwdN</code> - —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å",
        "list_help": "üìã <b>–°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π:</b>\n<code>.listpwd</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ä–æ–ª–∏",
        "pwd_generated": "‚úÖ <b>–ü–∞—Ä–æ–ª—å –¥–ª—è {}:</b>\n<code>{}</code>\nüîó {}",
        "random_pwd": "üé≤ <b>–°–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å:</b>\n<code>{}</code>",
        "pwd_list": "üìã <b>–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:</b>\n{}\n\nüîó –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:\n{}",
        "no_pwds": "‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π",
        "key_error": "üîë –û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å"
    }

    def __init__(self):
        self._passwords = {}
        self._key = None

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        if "passgen" not in self._db:
            self._db["passgen"] = {}
        self._load_passwords()

    def _load_passwords(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–æ–ª–µ–π –∏–∑ –±–∞–∑—ã"""
        if "passwords" in self._db["passgen"]:
            self._passwords = self._db["passgen"]["passwords"]
        if "key" in self._db["passgen"]:
            self._key = self._db["passgen"]["key"]

    def _save_passwords(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –≤ –±–∞–∑—É"""
        self._db["passgen"] = {
            "passwords": self._passwords,
            "key": self._key
        }

    def _generate_password(self, length=12):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
        chars = string.ascii_letters + string.digits + "!@#$%^&*()"
        while True:
            pwd = ''.join(random.choice(chars) for _ in range(length))
            if (any(c.islower() for c in pwd) and
                any(c.isupper() for c in pwd) and
                any(c.isdigit() for c in pwd) and
                any(c in "!@#$%^&*()" for c in pwd)):
                return pwd

    def _encrypt_password(self, password: str) -> str:
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        if not self._key:
            self._key = Fernet.generate_key().decode()
        cipher = Fernet(self._key.encode())
        return cipher.encrypt(password.encode()).decode()

    def _decrypt_password(self, encrypted: str) -> str:
        """–î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è"""
        if not self._key:
            raise ValueError("No encryption key")
        cipher = Fernet(self._key.encode())
        return cipher.decrypt(encrypted.encode()).decode()

    def _generate_login_link(self, site: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞"""
        if site.startswith(('http://', 'https://')):
            domain = urllib.parse.urlparse(site).netloc
        else:
            domain = site.split('/')[0]
        
        return f"https://{domain}/login" if domain else ""

    @loader.command()
    async def genpwd(self, message: Message):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∞–π—Ç–∞"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["gen_help"])
            return

        site = args.split()[0].lower()
        password = self._generate_password()
        login_link = self._generate_login_link(site)

        
        encrypted = self._encrypt_password(password)
        self._passwords[site] = encrypted
        self._save_passwords()

        response = self.strings["pwd_generated"].format(site, password, login_link)
        await utils.answer(message, response)

    @loader.command()
    async def genpwdN(self, message: Message):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–∞–π—Ç—É"""
        password = self._generate_password()
        await utils.answer(
            message,
            self.strings["random_pwd"].format(password)
        )

    @loader.command()
    async def listpwd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏"""
        if not self._passwords:
            await utils.answer(message, self.strings["no_pwds"])
            return

        try:
            pwd_list = []
            links = []
            for site, encrypted in self._passwords.items():
                decrypted = self._decrypt_password(encrypted)
                pwd_list.append(f"‚Ä¢ {site}: <code>{decrypted}</code>")
                login_link = self._generate_login_link(site)
                if login_link:
                    links.append(f"üîó {site}: {login_link}")

            response = self.strings["pwd_list"].format(
                "\n".join(pwd_list),
                "\n".join(links) if links else "‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"
            )
            await utils.answer(message, response)
        except Exception as e:
            await utils.answer(message, self.strings["key_error"])
            self._passwords = {}
            self._save_passwords()

    @loader.command()
    async def delpwd(self, message: Message):
        """–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∞–π—Ç–∞"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "–£–∫–∞–∂–∏—Ç–µ —Å–∞–π—Ç: <code>.delpwd site.com</code>")
            return

        site = args.lower()
        if site in self._passwords:
            del self._passwords[site]
            self._save_passwords()
            await utils.answer(message, f"üóëÔ∏è –ü–∞—Ä–æ–ª—å –¥–ª—è <code>{site}</code> —É–¥–∞–ª—ë–Ω")
        else:
            await utils.answer(message, f"‚ùå –ü–∞—Ä–æ–ª—å –¥–ª—è <code>{site}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω")
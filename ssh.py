meta developer: Goduser18
from hikka import loader, utils
import paramiko
import asyncio
from io import StringIO
import logging
from telethon.tl.types import Message
from telethon.tl.functions.channels import JoinChannelRequest

logger = logging.getLogger(__name__)

@loader.tds
class SSHModule(loader.Module):
    strings = {
        "name": "SSHClient",
        "need_config": "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ config SSHClient –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n- default_host: IP —Å–µ—Ä–≤–µ—Ä–∞\n- default_port: –ü–æ—Ä—Ç SSH\n- default_user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üñ•Ô∏è",
        "need_auth": "üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ key –∏–ª–∏ ~passwd üîê",
        "auth_success": "‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! ‚úÖ",
        "conn_closed": "üîå SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ üö™",
        "cmd_result": "üìü –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n```\n{}\n```",
        "no_connection": "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è üö´",
        "invalid_key": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SSH –∫–ª—é—á–∞ üîë",
        "key_loaded": "üîë SSH –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {} ‚ú®",
        "no_reply": "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –∫–ª—é—á–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª–µ–º üì®",
        "file_error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∫–ª—é—á–∞ üìÇ",
        "key_pass_required": "üîê –ö–ª—é—á —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å üîí",
        "connecting": "‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ... üöÄ",
        "timeout": "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ üö´",
        "no_command": "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: .komad ls üñ•Ô∏è",
        "loaded": "–ú–æ–¥—É–ª—å SSHClient —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω"
    }

    def __init__(self):
        self.ssh_client = None
        self.private_key = None
        self.password = None
        self.config = loader.ModuleConfig(
            loader.ConfigValue("default_host", None, "–•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞", validator=loader.validators.String()),
            loader.ConfigValue("default_port", 22, "SSH –ø–æ—Ä—Ç", validator=loader.validators.Integer(minimum=1, maximum=65535)),
            loader.ConfigValue("default_user", "root", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è SSH", validator=loader.validators.String()),
            loader.ConfigValue("timeout", 10, "–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Å–µ–∫)", validator=loader.validators.Integer(minimum=5, maximum=60))
        )

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        try:
            await client(JoinChannelRequest("@goduser18"))
        except Exception:
            pass
        # sorry üòü 
        saved_key = self._db.get("SSHClient", "private_key", None)
        saved_password = self._db.get("SSHClient", "password", None)
        if saved_key:
            try:
                key_file = StringIO(saved_key)
                key_types = [
                    (paramiko.RSAKey, "RSA", "-----BEGIN RSA PRIVATE KEY-----"),
                    (paramiko.ECDSAKey, "ECDSA", "-----BEGIN EC PRIVATE KEY-----"),
                    (paramiko.Ed25519Key, "ED25519", "-----BEGIN OPENSSH PRIVATE KEY-----"),
                    (paramiko.DSSKey, "DSA", "-----BEGIN DSA PRIVATE KEY-----")
                ]
                for key_class, name, header in key_types:
                    if saved_key.startswith(header):
                        try:
                            self.private_key = key_class.from_private_key(key_file)
                            self.logger.info(f"Loaded saved SSH key: {name}")
                            break
                        except Exception as e:
                            self.logger.error(f"Failed to load {name} key: {str(e)}")
                            break
                if not self.private_key:
                    raise Exception("Failed to load any key type")
            except Exception as e:
                self.logger.error(f"Failed to load saved key: {str(e)}")
                self._db.set("SSHClient", "private_key", None)
        if saved_password:
            self.password = saved_password
            self.logger.info("Loaded saved SSH password")
        await self._client.send_message("me", self.strings["loaded"])

    async def _connect_ssh(self):
        try:
            self.ssh_client = paramiko.SSHClient()
            self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            connect_params = {
                "hostname": self.config["default_host"],
                "port": int(self.config["default_port"]),
                "username": self.config["default_user"],
                "timeout": self.config["timeout"],
                "look_for_keys": False,
                "allow_agent": False
            }
            
            if self.private_key:
                connect_params["pkey"] = self.private_key
            else:
                connect_params["password"] = self.password

            await asyncio.get_event_loop().run_in_executor(None, lambda: self.ssh_client.connect(**connect_params))
            return True
        except Exception as e:
            self.logger.error(f"SSH connection failed: {str(e)}")
            if self.ssh_client:
                self.ssh_client.close()
                self.ssh_client = None
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

    @loader.command(aliases=["key"])
    async def keycmd(self, message):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å SSH –∫–ª—é—á (–æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º)"""
        reply = await message.get_reply_message()
        if not reply or not reply.document:
            await utils.answer(message, self.strings["no_reply"])
            return
        
        try:
            key_data = await reply.download_media(bytes)
            if not key_data:
                await utils.answer(message, self.strings["file_error"])
                return

            key_str = key_data.decode('utf-8')
            key_file = StringIO(key_str)
            
            key_types = [
                (paramiko.RSAKey, "RSA", "-----BEGIN RSA PRIVATE KEY-----"),
                (paramiko.ECDSAKey, "ECDSA", "-----BEGIN EC PRIVATE KEY-----"),
                (paramiko.Ed25519Key, "ED25519", "-----BEGIN OPENSSH PRIVATE KEY-----"),
                (paramiko.DSSKey, "DSA", "-----BEGIN DSA PRIVATE KEY-----")
            ]
            for key_class, name, header in key_types:
                if key_str.startswith(header):
                    try:
                        self.private_key = key_class.from_private_key(key_file)
                        self.password = None
                        self._db.set("SSHClient", "private_key", key_str)
                        self._db.set("SSHClient", "password", None)
                        await utils.answer(message, self.strings["key_loaded"].format(name))
                        self.logger.info(f"SSH key loaded: {name}")
                        return
                    except paramiko.PasswordRequiredException:
                        await utils.answer(message, self.strings["key_pass_required"])
                        return
                    except Exception as e:
                        self.logger.error(f"Failed to load {name} key: {str(e)}")
                        break
            await utils.answer(message, self.strings["invalid_key"])
        except Exception as e:
            self.logger.error(f"Error loading key: {str(e)}")
            await utils.answer(message, f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞**: {str(e)} üí•")

    @loader.command(aliases=["passwd"])
    async def passwdcmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º)"""
        reply = await message.get_reply_message()
        if not reply:
            await utils.answer(message, self.strings["no_reply"])
            return
        
        try:
            self.password = reply.raw_text.strip()
            if not self.password:
                await utils.answer(message, "‚ùå **–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º** üö´")
                return
            self.private_key = None
            self._db.set("SSHClient", "password", self.password)
            self._db.set("SSHClient", "private_key", None)
            await utils.answer(message, self.strings["auth_success"])
            self.logger.info("SSH password set successfully")
        except Exception as e:
            self.logger.error(f"Error setting password: {str(e)}")
            await utils.answer(message, f"‚ùå **–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è**: {str(e)} üí•")

    @loader.command(aliases=["komad", "cmd", "ssh"])
    async def komadcmd(self, message):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
        –ü—Ä–∏–º–µ—Ä: .komad ls -la /home"""
        if not self.config["default_host"]:
            await utils.answer(message, self.strings["need_config"])
            return

        if not (self.private_key or self.password):
            await utils.answer(message, self.strings["need_auth"])
            return

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_command"])
            return

        cmd = args.strip()
        status_msg = await utils.answer(message, self.strings["connecting"])
        try:
            if not self.ssh_client or not self.ssh_client.get_transport().is_active():
                await self._connect_ssh()

            stdin, stdout, stderr = await asyncio.get_event_loop().run_in_executor(
                None, lambda: self.ssh_client.exec_command(cmd, timeout=self.config["timeout"])
            )
            output = (await asyncio.get_event_loop().run_in_executor(None, stdout.read)).decode().strip()
            error = (await asyncio.get_event_loop().run_in_executor(None, stderr.read)).decode().strip()
            
            message_text = f"""
üíª <b>–ö–æ–¥:</b>
<pre><code class="language-bash">{cmd}</code></pre>

‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
<pre><code class="language-bash">{output if output else '–ù–µ—Ç –≤—ã–≤–æ–¥–∞'}</code></pre>
"""

            if error:
                message_text += f"""
üö´ <b>–û—à–∏–±–∫–∏:</b>
<pre><code class="language-error">{error}</code></pre>
"""
            await utils.answer(status_msg, message_text.strip(), parse_mode="HTML")
        except Exception as e:
            message_text = f"""
üíª <b>–ö–æ–¥:</b>
<pre><code class="language-bash">{cmd}</code></pre>

üö´ <b>–û—à–∏–±–∫–∞:</b>
<pre><code class="language-error">{str(e)}</code></pre>
"""
            await utils.answer(status_msg, message_text.strip(), parse_mode="HTML")
        finally:
            if self.ssh_client:
                self.ssh_client.close()
                self.ssh_client = None

    async def on_unload(self):
        if self.ssh_client:
            self.ssh_client.close()
            self.ssh_client = None
